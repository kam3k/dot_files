priority -50

snippet inc "include <>"
#include <${1:string}>
endsnippet

snippet cr "const reference"
const ${1:std::string}& $2
endsnippet

snippet ca "const auto"
const auto& $1
endsnippet

snippet forb "for begin, end"
for (auto ${1:it} = ${2:v}.begin(); $1 != $2.end(); ++$1)
{
	$3
}
endsnippet

snippet forr "for range"
for (const auto &${1:i} : ${2:v})
{
	$3
}
endsnippet

snippet forw "for range"
for (auto &${1:i} : ${2:v})
{
	$3
}
endsnippet

snippet cout "cout<<'x='<<x<<'\\n'"
std::cout << "${1:i} = " << $1 << "\n";
endsnippet

snippet temp "template <typename T>"
template <typename ${1:T}>
endsnippet

snippet enum "enum class"
enum class ${1:name}
{
	$2
};
endsnippet

snippet struct "struct"
struct $1
{
  $2
};
endsnippet

snippet class "class"
class $1
{
public:
  $2
private:
};
endsnippet

snippet settings "settings"
struct
{
  $1
} settings;
endsnippet

snippet str "string"
std::string ${1:text}
endsnippet

snippet cstr "const std::string&"
const std::string& ${1:text}
endsnippet

snippet mut "std::mutex"
std::mutex ${1:lock}
endsnippet

snippet lock "std::unique_lock"
std::unique_lock<std::mutex> lock(${1:lock});
endsnippet

snippet lockg "std::lock_guard"
std::lock_guard<std::mutex> lock(${1:lock});
endsnippet

snippet alg "std::algorithm(begin, end);"
std::${1:sort}(${2:v}.begin(), $2.end()${3:, [$4]($5){$6;}});
endsnippet

snippet fun "function"
${1:void} ${2:foo}($3)
{
  $4
}
endsnippet

snippet fund "function"
${1:void} ${2:foo}($3);
endsnippet

snippet funt "function template"
template <typename ${1:T}>
${2:void} ${3:function_name} ($4)
{
  $5
}
endsnippet

snippet ns "namespace"
namespace ${1:_detail}
{
	$2
} // namespace $1
endsnippet

snippet up "unique pointer"
std::unique_ptr<$1> ${2:var}
endsnippet

snippet mu "make unique pointer"
std::make_unique<$1>(${2:var})
endsnippet

snippet sp "shared pointer"
std::shared_ptr<$1> ${2:var}
endsnippet

snippet ms "make shared pointer"
std::make_shared<$1>(${2:var})
endsnippet

snippet uc "unsigned char"
unsigned char ${1:var}
endsnippet

snippet i8 "int8_t"
std::int8_t ${1:var}
endsnippet

snippet i16 "int16_t"
std::int16_t ${1:var}
endsnippet

snippet i32 "int32_t"
std::int32_t ${1:var}
endsnippet

snippet i64 "int64_t"
std::int64_t ${1:var}
endsnippet

snippet u8 "uint8_t"
std::uint8_t ${1:var}
endsnippet

snippet u16 "uint16_t"
std::uint16_t ${1:var}
endsnippet

snippet u32 "uint32_t"
std::uint32_t ${1:var}
endsnippet

snippet u64 "uint64_t"
std::uint64_t ${1:var}
endsnippet

snippet async "std::async"
async(${1:std::launch::async, }[${2:this}](${3}){
	${4:return true;}
});
endsnippet

snippet gt "TEST()"
TEST($1, $2)
{
  $3
}
endsnippet

snippet le "logger error"
logger.errorStream() << "$1";
endsnippet

snippet lw "logger warn"
logger.warnStream() << "$1";
endsnippet

snippet li "logger info"
logger.infoStream() << "$1";
endsnippet

snippet ld "logger debug"
logger.debugStream() << "$1";
endsnippet

snippet lt "logger trace"
logger.traceStream() << "$1";
endsnippet
